<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wangxj35&#39;s Blog</title>
    <link>https://wangxj35.github.io/</link>
    <description>Recent content on wangxj35&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 24 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wangxj35.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux(CentOS)搭建nfs服务器</title>
      <link>https://wangxj35.github.io/post/linux%E6%90%AD%E5%BB%BAnfs%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/linux%E6%90%AD%E5%BB%BAnfs%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>服务器端：
第一步：CentOS7.5通过yum安装 nfs-utils 和 rpcbind
[root@localhost~]#yum install -y nfs-utils
[root@localhost~]#yum install -y rpcbind
第二步：启动服务和设置开机启动（先启动rpc服务，再启动nfs服务）
[root@localhost~]#systemctl start rpcbind
[root@localhost~]#systemctl enable rpcbind
[root@localhost~]#systemctl start nfs nfs-secure
[root@localhost~]#systemctl enable nfs nfs-secure
第三步：配置共享文件目录，编辑配置文件/etc/exports
[root@localhost~]#vi /etc/exports
​ /nfsdata *(rw,no_root_squash,no_all_squash,sync)
[root@localhost~]#systemctl reload nfs
#重新加载NFS服务，使配置生效
配置文件参数详解：
   参数 作用     ro 只读   rw 读写   root_squash 当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户   no_root_squash 当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员   all_squash 无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户   sync 同时将数据写入到内存与硬盘中，保证不丢失数据   async 优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据    客户端挂载：</description>
    </item>
    
    <item>
      <title>Linux设置挂载盘开机自动挂载</title>
      <link>https://wangxj35.github.io/post/linux%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/linux%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%9B%98%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</guid>
      <description>方法1：
把mount 的命令放到/etc/rc.d/rc.local 里面去，vi /etc/rc.d/rc.local ，然后把 mount /dev/vdb1 /var/lib/docker 这个命令写进去。保存退出就好了。
方法2：
修改/etc/fstab文档
 /etc/fstab Created by anaconda on Wed Sep 23 17:35:36 2020  Accessible filesystems, by reference, are maintained under &amp;lsquo;/dev/disk&amp;rsquo; See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info  /dev/mapper/centos-root / xfs defaults 0 0 UUID=c6af196a-f316-44c1-a772-8386727e3ca5 /boot xfs defaults 0 0 /dev/mapper/centos-swap swap swap defaults 0 0 /dev/vdb1 /var/lib/docker xfs defaults 0 0 /dev/vdb2 /var/log xfs defaults 0 0</description>
    </item>
    
    <item>
      <title>Pppoe服务器搭建及使用</title>
      <link>https://wangxj35.github.io/post/pppoe%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/pppoe%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>服务器端配置： 安装rp-pppoe软件，修改配置文件/etc/ppp/pppoe-server-options，内容如下：
#PPP options for the PPPoE server
#LIC: GPL
require-pap
#login
lcp-echo-interval 10
lcp-echo-failure 2
ms-dns 10.96.1.18
因为上面指定了pap认证，修改/etc/ppp/pap-secrets内容如下：
Secrets for authentication using PAP
client server secret IP addresses
&amp;ldquo;wangxj35&amp;rdquo; * &amp;ldquo;public&amp;rdquo; *
同时需要再系统中添加wangxj35的用户：useradd wangxj35; passwd wangxj35
然后启动服务：
pppoe-server -I ens3 -L 192.168.111.1 -R 192.168.111.100 -N 10 (192.168.111就是拨号的网段了)
客户端配置： 修改客户端网卡配置中的启动协议 BOOTPROTO=dailup
安装rp-pppoe软件，配置如下：
pppoe-setup
当出现
&amp;gt;&amp;gt;&amp;gt; Enter your PPPoE user name:
输入ADSL账号的用户名 wangxj35
当出现
&amp;gt;&amp;gt;&amp;gt; Enter the Ethernet interface connected to the ADSL modem</description>
    </item>
    
    <item>
      <title>Hugo&#43;Github搭建博客及使用</title>
      <link>https://wangxj35.github.io/post/hugo&#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/hugo&#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>Hugo+Github搭建博客及使用 Github操作：  注册一个github账号并登录，地址： https://github.com/ 新建一个github repository, 库名为username.github.io  Hugo操作：   安装hugo, 参考官方教程：https://gohugo.io/getting-started/installing
windows安装：直接下载最新版的exe文件，下载地址： https://github.com/gohugoio/hugo/releases ，将可执行文件设置成环境变量，可百度一下windows设置环境变量方法。
  安装完成后，打开cmd, 输入以下命令确认hugo版本。
hugo version
  新建一个Hugo网站，进入存放Hugo网站文件夹的目录，比如：F:\hugo，执行以下命令新建一个Hugo网站。
hugo new site blog
  选择Hugo主题并克隆至本地目录，地址：https://themes.gohugo.io, 将所选主题克隆至本地目录，方法如下：
cd F:\hugo\blog *#* *进入网站目录*
mkdir themes *#* *创建“themes”目录*
cd themes *#* *进入”themes“目录*
git clone https://github.com/matsuyoshi30/harbor.git harbor *# 将Harbor主题克隆至”harbor“目录。*
  编辑配置文件，在Hugo网站文件夹的根目录下，编辑config.toml文件
windows系统： copy themes\harbor\exampleSite\config.toml .
baseURL = &amp;quot;https://username.github.io/&amp;quot; # username替换为自己的博客名字 languageCode = &amp;quot;en-us&amp;quot; title = &amp;quot;wangxj35&#39;s Blog&amp;quot; theme = &amp;quot;simple-blog&amp;quot;</description>
    </item>
    
    <item>
      <title>My First Blog</title>
      <link>https://wangxj35.github.io/post/my-first-blog/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/my-first-blog/</guid>
      <description>Hello</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/kubeadm%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/kubeadm%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/</guid>
      <description>kubeadm搭建k8s集群 准备工作：   准备3个节点，安装centos7.5
  关闭防火墙和selinux
#systemctl stop firewalld &amp;amp;&amp;amp; systemctl disable firewalld#sed -i &#39;s/enforcing/disabled/&#39; /etc/selinux/config # 永久#setenforce 0 # 临时  设置主机名为node1, node2, node3
#hostnamectl set-hostname node1#hostnamectl set-hostname node2#hostnamectl set-hostname node3  关闭swap分区
#swapoff -a #临时#vi /etc/fstab #注释swap分区行，永久关闭  node1节点生成秘钥，并配置hosts与其他节点互信
#cat &amp;gt;&amp;gt; /etc/hosts &amp;lt;&amp;lt; EOF10.121.121.5 node110.121.121.6 node210.121.121.9 node3EOF#ssh-keygen (一路回车，默认)#ssh-copy-id -i /root/.ssh/id_rsa.pub node1#ssh-copy-id -i /root/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/readme/</guid>
      <description>This directory (and version of CentOS) is deprecated. For normal users, you should use /7/ and not /7.5.1804/ in your path. Please see this FAQ concerning the CentOS release scheme:
https://wiki.centos.org/FAQ/General
If you know what you are doing, and absolutely want to remain at the 7.5.1804 level, go to http://vault.centos.org/ for packages.
Please keep in mind that 7.5.1804 no longer gets any updates, nor any security fix&amp;rsquo;s.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%88%97%E5%87%BA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8B%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BEpod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%88%97%E5%87%BA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8B%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BEpod/</guid>
      <description>列出命名空间下指定标签pod 题：列出命名空间kube-system下面标签为k8s-app=kube-dns的所有pod
#kubectl get pod -n kube-system --show-labels |grep &amp;quot;k8s-app=kube-dns&amp;quot;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BApod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BApod/</guid>
      <description>创建pod 题：创建一个新的命名空间cka, 并在此命名空间中创建一个pod，pod名为pod-1, 镜像：nginx
#kubectl create ns cka#cat pod-01.yamlapiVersion: v1kind: Podmetadata:name: pod-01namespace: ckalabels:app: myappspec:containers:- name: nginximage: nginx#kubectl apply -f pod-01.yaml#kubectl run pod-01 --iamge=nginx --namespace=cka #命令快速创建pod#cat cka-ns.yamlapiVersion: v1kind: Namespacemetadata:name: cka</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdeployment%E5%89%AF%E6%9C%AC%E6%95%B03%E6%BB%9A%E5%8A%A8%E5%9B%9E%E6%BB%9A%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdeployment%E5%89%AF%E6%9C%AC%E6%95%B03%E6%BB%9A%E5%8A%A8%E5%9B%9E%E6%BB%9A%E5%8A%9F%E8%83%BD/</guid>
      <description>创建一个deployment副本数3，滚动回滚功能 题：创建一个deployment副本数3，然后滚动更新镜像版本，并记录这个更新记录，最后再回滚到上一个版本
名称：nginx
镜像版本：1.16
更新镜像版本： 1.17
#cat nginx-deploy.yamlapiVersion: apps/v1kind: Deploymentmetadata:name: nginxlabels:app: nginx-deployspec:replicas: 3selector:matchLabels:app: nginx-deploytemplate:metadata:labels:app: nginx-deployspec:containers:- name: nginximage: nginx:1.16#kubectl create deployment nginx --image=nginx:1.16 --replicas=3 命令行创建deployment#kubectl set image deployment nginx nginx=nginx:1.17 --record=true 更新镜像版本并记录#kubectl rollout history deployment nginx #查看更新记录#kubectl rollout undo deployment nginx #回滚到上一个版本#kubectl rollout undo deployment nginx --to-revision=1 #回滚到指定版本#kubectl rollout status deployment nginx #查看更新状态</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdeployment%E5%B9%B6%E6%9A%B4%E9%9C%B2service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAdeployment%E5%B9%B6%E6%9A%B4%E9%9C%B2service/</guid>
      <description>创建一个Deployment，并暴露service 题：创建一个deployment，并暴露service，名称：wangxj，镜像：nginx
#cat deployment.yamlapiVersion: apps/v1kind: Deploymentmetadata:name: wangxjlabels:app: wangxjspec:replicas: 1selector:matchLabels:app: wangxjtemplate:metadata:labels:app: wangxjspec:containers:- name: nginximage: nginxports:- containerPort: 80---apiVersion: v1kind: Servicemetadata:name: wangxjspec:selector:app: wangxjtype: NodePortports:- protocol: TCPport: 80targetPort: 80#kubectl create deployment wangxj --image=nginx#kubectl expose deployment wangxj --port=80 --targe-port=80 --type=NodePort</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AApod-%E5%88%86%E9%85%8D%E5%88%B0%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BEnode%E4%B8%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AApod-%E5%88%86%E9%85%8D%E5%88%B0%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BEnode%E4%B8%8A/</guid>
      <description>创建一个pod, 分配到指定标签node上 题：创建一个pod, 分配到指定标签node上
pod名称：web01
镜像：nginx
node标签：disk=ssd
#cat web01.yamlapiVersion: v1kind: Podmetadata:name: web01spec:nodeSelector:disk: ssdcontainers:- name: web01image: nginx</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%90%E8%A1%8C4%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%90%E8%A1%8C4%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84pod/</guid>
      <description>创建一个运行4个容器的pod 题：创建一个pod, 其中运行着nginx, redis, memcached, consul 4个容器
#cat four.yamlapiVersion: v1kind: Podmetadata:name: fourlabels:app: fourspec:containers:- name: nginximage: nginx- name: redisimage: redis- name: memcachedimage: memcached- name: consulimage: consul</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%90%91pod%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAinit%E5%AE%B9%E5%99%A8init%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A6%82%E6%9E%9C%E8%AF%A5%E7%A9%BA%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%A3%80%E6%B5%8B%E5%88%B0pod%E5%B0%B1%E9%80%80%E5%87%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%90%91pod%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAinit%E5%AE%B9%E5%99%A8init%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A6%82%E6%9E%9C%E8%AF%A5%E7%A9%BA%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%A3%80%E6%B5%8B%E5%88%B0pod%E5%B0%B1%E9%80%80%E5%87%BA/</guid>
      <description>向pod中添加一个init容器，init容器创建一个空文件，如果该空文件没有被检测到，pod就退出 题：向pod中添加一个init容器，init容器创建一个空文件，如果该空文件没有被检测到，pod就退出， pod名称：web
#cat web.yamlapiVersion: v1kind: Podmetadata:name: webspec:initContainers:- name: init-nginximage: nginxcommand: [&#39;touch&#39;, &#39;/opt/test&#39;]volumeMounts:- mountPath: /optname: datacontainers:- name: web-nginximage: nginxvolumeMounts:- mountPath: /optname: datalivenessProbe:exec:command:- cat- /opt/testrestartPolicy: Nevervolumes:- name: dataemptyDir: {}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E5%9C%A8%E8%8A%82%E7%82%B9%E4%B8%8A%E9%85%8D%E7%BD%AEkubelet%E6%89%98%E7%AE%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AApod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E5%9C%A8%E8%8A%82%E7%82%B9%E4%B8%8A%E9%85%8D%E7%BD%AEkubelet%E6%89%98%E7%AE%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AApod/</guid>
      <description>在节点上配置kubelet托管启动一个pod 题：在node1节点中配置kubelet托管启动一个pod, pod名称：web, 镜像：nginx
#cd /etc/kubernetes/manifests#cat web.yamlapiVersion: v1kind: Podmetadata:name: webnamespace: defaultlabels:app: webspec:containers:- name: nginximage: nginx#cat /var/lib/kubelet/config.yamlstaticPodPath: /etc/kubernetes/manifests #检查kubelet是否启用此功能</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E6%8C%89%E8%A6%81%E6%B1%82%E8%BE%93%E5%87%BA%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%8A%B6%E6%80%81%E4%B8%BAready%E7%9A%84node%E7%9A%84%E6%95%B0%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E6%8C%89%E8%A6%81%E6%B1%82%E8%BE%93%E5%87%BA%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%8A%B6%E6%80%81%E4%B8%BAready%E7%9A%84node%E7%9A%84%E6%95%B0%E9%87%8F/</guid>
      <description>按要求输出集群中状态为ready的node的数量 题： 查看集群中状态为ready的node数量，不包含被打了NodeSchedule污点的节点，并将结果写到/opt/node.txt
#kubectl describe node $(kubectl get node |grep Ready |awk &#39;{print $1}&#39;) |grep Taint |grep -vc NoSchedule &amp;gt; /opt/node.txt</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E6%9F%A5%E7%9C%8Bpod%E6%97%A5%E5%BF%97%E5%B9%B6%E5%B0%86%E6%97%A5%E5%BF%97%E4%B8%ADerror%E7%9A%84%E8%A1%8C%E8%AE%B0%E5%BD%95%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E6%9F%A5%E7%9C%8Bpod%E6%97%A5%E5%BF%97%E5%B9%B6%E5%B0%86%E6%97%A5%E5%BF%97%E4%B8%ADerror%E7%9A%84%E8%A1%8C%E8%AE%B0%E5%BD%95%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</guid>
      <description>查看pod日志，并将日志中Error的行记录到指定文件 题：查看pod日志，并将日志中Error的行记录到指定文件，pod名称：nginx, 文件：/opt/nginx-log
#kubectl logs nginx |grep error &amp;gt; /opt/nginx-log</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8cpu%E6%9C%80%E9%AB%98%E7%9A%84pod-%E5%B9%B6%E8%AE%B0%E5%BD%95%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8cpu%E6%9C%80%E9%AB%98%E7%9A%84pod-%E5%B9%B6%E8%AE%B0%E5%BD%95%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</guid>
      <description>查看指定标签使用cpu最高的pod, 并记录到指定文件 题：查看指定标签app=web使用cpu最高的pod, 并记录到指定文件/opt/cpu
#kubectl top pods -l app=web --sort-by=&amp;quot;cpu&amp;quot; &amp;gt; /opt/cpu</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAdeployment-yaml%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%88%B0optdeploy.yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAdeployment-yaml%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%88%B0optdeploy.yaml/</guid>
      <description>生成一个deployment yaml文件保存到/opt/deploy.yaml 题： 生成一个deployment yaml文件保存到/opt/deploy.yaml
名称：web
标签：app_env_stage=dev
#kubectl create deployment web --image=nginx --dry-run=client -o yaml &amp;gt; /opt/deploy.yaml#cat deploy.yaml ##再修改标签apiVersion: apps/v1kind: Deploymentmetadata:labels:app_env_stage: devname: webspec:replicas: 1selector:matchLabels:app_env_stage: devtemplate:metadata:labels:app_env_stage: devspec:containers:- image: nginxname: nginx</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E7%A1%AE%E4%BF%9D%E5%9C%A8%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%8A%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AApod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E7%A1%AE%E4%BF%9D%E5%9C%A8%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%8A%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AApod/</guid>
      <description>确保在每个节点上运行一个pod 题：确保在每个节点上运行一个pod
名称：filebeat
镜像：elastic/filebeat:7.3.2
#cat daemonset.yamlapiVersion: apps/v1kind: DaemonSetmetadata:name: filebeatspec:selector:matchLabels:name: filebeattemplate:metadata:labels:name: filebeatspec:containers:- name: filebeatimage: elastic/filebeat:7.3.2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E7%BB%99web-deployment%E6%89%A9%E5%AE%B9%E5%89%AF%E6%9C%AC%E6%95%B0%E4%B8%BA3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E7%BB%99web-deployment%E6%89%A9%E5%AE%B9%E5%89%AF%E6%9C%AC%E6%95%B0%E4%B8%BA3/</guid>
      <description>给web deployment扩容副本数为3 题：给web deployment扩容副本数为3
#kubectl scale deployment/web --replicas=3</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E7%BB%99%E4%B8%80%E4%B8%AApod%E5%88%9B%E5%BB%BAservice-%E5%B9%B6%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87clusterip%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E7%BB%99%E4%B8%80%E4%B8%AApod%E5%88%9B%E5%BB%BAservice-%E5%B9%B6%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87clusterip%E8%AE%BF%E9%97%AE/</guid>
      <description>给一个pod创建service, 并可以通过ClusterIP访问 题：给一个pod创建service, 并可以通过ClusterIP访问
名称： web-service
pod名称： web-pod
容器端口： 80
#kubectl run web-pod --image=nginx#kubectl expose pod web-pod --name=web-service --port=80 --target-port=80 --type=ClusterIP</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangxj35.github.io/post/%E8%AE%BE%E7%BD%AE%E6%88%90node%E4%B8%8D%E8%83%BD%E8%B0%83%E5%BA%A6%E5%B9%B6%E4%BD%BF%E5%B7%B2%E8%B0%83%E5%BA%A6%E7%9A%84pod%E9%87%8D%E6%96%B0%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangxj35.github.io/post/%E8%AE%BE%E7%BD%AE%E6%88%90node%E4%B8%8D%E8%83%BD%E8%B0%83%E5%BA%A6%E5%B9%B6%E4%BD%BF%E5%B7%B2%E8%B0%83%E5%BA%A6%E7%9A%84pod%E9%87%8D%E6%96%B0%E8%B0%83%E5%BA%A6/</guid>
      <description>设置成node不能调度，并使已调度的pod重新调度 题：设置成node不能调度，并使已调度的pod重新调度
#kubectl cordon node1#kubectl drain node1 --ignore-daemonsets</description>
    </item>
    
  </channel>
</rss>